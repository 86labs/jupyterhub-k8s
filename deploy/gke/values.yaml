hub:
  image:
    name: gfeldman8/hub-k8s
    pullPolicy: Always
  extraConfig:
    00-bind-url-config: | 
      c.JupyterHub.bind_url = 'https://jupyterhub.prod.k8s.86labs.com'
    01-keycloak-config: |
      from custom_authenticators.keycloak_authenticator import KeycloakAuthenticator
      c.JupyterHub.authenticator_class = KeycloakAuthenticator
    02-kubespawner-config: |
      c.JupyterHub.spawner_class = 'custom_kube_spawner.CustomKubeSpawner'
  extraEnv:
    PYTHONPATH: "/app/hub_custom:$(PYTHONPATH)"
  extraVolumeMounts:
    - name: keycloak-config
      mountPath: "/usr/local/etc/jupyterhub/jupyterhub_config.d/00_keycloak.json"
      subPath: "keycloak.json"
  extraVolumes:
    - name: keycloak-config
      secret: 
        secretName: jupyterhub-oauth-keycloak
scheduling:
  userScheduler:
    replicas: 1
proxy:
  service:
    type: ClusterIP
  https:
    enabled: true
    type: offload
singleuser:
  extraFiles:
    notebook_config:
      mountPath: "/usr/local/etc/jupyter/jupyter_notebook_config.py"
      stringData: |
          import os
          os.environ['TEST_USER_PROPAGATION'] = os.environ.get('PROP_USER_INFO')
          os.environ['TEST_PROFILE_PROPAGATION'] = os.environ.get('PROP_USER_PROFILE')

  nodeSelector:
    cloud.google.com/gke-nodepool: ephemeral-pool
  extraTolerations:
    - key: ephemeral
      value: "true"
      operator: Equal
      effect: "NoSchedule"
ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true" # ssl termination is done before reaching this
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  hosts:
  - jupyterhub.prod.k8s.86labs.com
  tls:
  - secretName: jupyterhub-prod-k8s-86labs-com
    hosts:
      - jupyterhub.prod.k8s.86labs.com
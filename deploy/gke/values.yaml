hub:
  extraConfig:
    00_bind_url_config: | 

  extraFiles:
    keycloak_authenticator:
      mountPath: /app/custom/keycloak_authenticator.py
    custom_kube_spawner:
      mountPath: /app/custom/custom_kube_spawner.py
    bind_url_config:
      mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/00_bind_url_config.py
      stringData: |
        c.JupyterHub.bind_url = 'https://jupyterhub.prod.k8s.86labs.com'
        c.JupyterHub.admin_access = True
    keycloak_config:
      mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/01_keycloak_config.py
      stringData: |
        from keycloak_authenticator import KeycloakAuthenticator
        c.JupyterHub.authenticator_class = KeycloakAuthenticator
    spawner_config:
      mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/02_spawner_config.py
      stringData: |
        from custom_kube_spawner import CustomKubeSpawner
        c.JupyterHub.spawner_class = CustomKubeSpawner

  extraEnv:
    PYTHONPATH: "/app/custom:$(PYTHONPATH)"
    OAUTH_CLIENT_ID:
      valueFrom:
        secretKeyRef:
          name: jupyterhub-oauth-keycloak
          key: OAUTH_CLIENT_ID
    OAUTH_CLIENT_SECRET:
      valueFrom:
        secretKeyRef:
          name: jupyterhub-oauth-keycloak
          key: OAUTH_CLIENT_SECRET
    OAUTH2_TOKEN_URL:
      valueFrom:
        secretKeyRef:
          name: jupyterhub-oauth-keycloak
          key: OAUTH2_TOKEN_URL
    OAUTH2_USERDATA_URL:
      valueFrom:
        secretKeyRef:
          name: jupyterhub-oauth-keycloak
          key: OAUTH2_USERDATA_URL
    OAUTH2_AUTHORIZE_URL:
      valueFrom:
        secretKeyRef:
          name: jupyterhub-oauth-keycloak
          key: OAUTH2_AUTHORIZE_URL
    OAUTH_LOGOUT_REDIRECT_URL:
      valueFrom:
        secretKeyRef:
          name: jupyterhub-oauth-keycloak
          key: OAUTH_LOGOUT_REDIRECT_URL
scheduling:
  userScheduler:
    replicas: 1
proxy:
  service:
    type: ClusterIP
  https:
    enabled: true
    type: offload
singleuser:
  cloudMetadata:
    blockWithIptables: false
  extraEnv:
    JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"

  extraFiles:
    notebook_config:
      mountPath: "/usr/local/etc/jupyter/jupyter_server_config.py"
      stringData: |
          import os
          from hybridcontents import HybridContentsManager
          from s3contents import GCSContentsManager
          from notebook.services.contents.largefilemanager import LargeFileManager

          os.environ['TEST_USER_PROPAGATION'] = os.environ.get('PROP_USER_INFO')
          os.environ['TEST_PROFILE_PROPAGATION'] = os.environ.get('PROP_USER_PROFILE')
          
          c.ServerApp.contents_manager_class = HybridContentsManager
          c.HybridContentsManager.manager_classes = {
              "": GCSContentsManager,
              "scratch": LargeFileManager
          }
          c.HybridContentsManager.manager_kwargs = {
            "": {"project": "labs-governance", "bucket": "jupyterhub-86labs-k8s-storage"},
            "scratch": {"root_dir": "/home/jovyan"}
          }
          c.HybridContentsManager.managers = {
            k: v(**c.HybridContentsManager.manager_kwargs.get(k)) for k,v in c.HybridContentsManager.manager_classes.items()
          }
          
          
  nodeSelector:
    cloud.google.com/gke-nodepool: ephemeral-pool
  extraTolerations:
    - key: ephemeral
      value: "true"
      operator: Equal
      effect: "NoSchedule"
ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true" # ssl termination is done before reaching this
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  hosts:
  - jupyterhub.prod.k8s.86labs.com
  tls:
  - secretName: jupyterhub-prod-k8s-86labs-com
    hosts:
      - jupyterhub.prod.k8s.86labs.com